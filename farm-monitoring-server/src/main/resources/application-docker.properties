# Server configuration
server.port=8080

# Database configuration for Docker
spring.datasource.url=jdbc:postgresql://postgres:5432/farm_monitoring
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA configuration
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=true

# Initialization
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.defer-datasource-initialization=true
spring.sql.init.mode=always
spring.sql.init.data-locations=classpath:db/data.sql
spring.sql.init.schema-locations=classpath:db/schema.sql
spring.jpa.properties.hibernate.connection.charSet=UTF-8

# Thymeleaf configuration
spring.thymeleaf.cache=false

# Logging
logging.level.org.springframework=INFO
logging.level.com.farmmonitoring=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# Actuator
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=always

# Swagger/OpenAPI configuration
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.operationsSorter=method
springdoc.swagger-ui.tagsSorter=alpha

# Dummy OAuth2 config to avoid startup error in Docker
spring.security.oauth2.client.registration.google.client-id=dummy
spring.security.oauth2.client.registration.google.client-secret=dummy
spring.security.oauth2.client.registration.google.scope=openid,profile,email
spring.security.oauth2.client.registration.github.client-id=dummy
spring.security.oauth2.client.registration.github.client-secret=dummy
spring.security.oauth2.client.registration.github.scope=user:email,read:user 